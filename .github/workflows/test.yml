# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Run Tests (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: ['1.24.x']

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true
          cache-dependency-path: go.sum

      - name: Install Nix
        if: runner.os != 'Windows'
        uses: DeterminateSystems/nix-installer-action@main

      - name: Verify Go modules
        run: |
          go mod verify
          go mod tidy
          status=$(git status --porcelain go.mod go.sum)
          if [ -n "$status" ]; then
            echo "go.mod or go.sum is not up to date"
            exit 1
          fi
        shell: bash

      - name: Cache Go build and test cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/.cache/golangci-lint
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-${{ hashFiles('**/*.go') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Run Unit Tests with caching
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            parallel_value="$NUMBER_OF_PROCESSORS"
          elif [ "$RUNNER_OS" == "macOS" ]; then
            parallel_value=$(sysctl -n hw.ncpu)
          else
            parallel_value=$(nproc)
          fi
          go test -v -count=1 -race -parallel "$parallel_value" ./tests/unit/... -test.cache
        shell: bash

      - name: Run Integration Tests with caching
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            parallel_value="$NUMBER_OF_PROCESSORS"
          elif [ "$RUNNER_OS" == "macOS" ]; then
            parallel_value=$(sysctl -n hw.ncpu)
          else
            parallel_value=$(nproc)
          fi
          go test -v -count=1 -race -parallel "$parallel_value" ./tests/integration/... -test.cache
        shell: bash

      - name: Run Benchmarks with caching
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            parallel_value="$NUMBER_OF_PROCESSORS"
          elif [ "$RUNNER_OS" == "macOS" ]; then
            parallel_value=$(sysctl -n hw.ncpu)
          else
            parallel_value=$(nproc)
          fi
          go test -v -count=1 -bench=. -parallel "$parallel_value" ./tests/benchmark/... -test.cache
        shell: bash

      - name: Generate Test Coverage
        run: go test -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Check coverage threshold
        shell: python
        run: |
          import sys
          with open('coverage.out', 'r') as f:
            for line in f:
              if 'total:' in line:
                coverage = float(line.split()[-1].rstrip('%'))
                threshold = 80
                if coverage < threshold:
                  print(f"Test coverage ({coverage}%) is below threshold ({threshold}%)")
                  sys.exit(1)
                print(f"Test coverage: {coverage}%")
                break

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.os }}
          path: coverage.out
          retention-days: 7

  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'
          cache: true
          cache-dependency-path: go.sum

      - name: Cache golangci-lint
        uses: actions/cache@v4
        with:
          path: ~/.cache/golangci-lint
          key: ${{ runner.os }}-golangci-lint-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-golangci-lint-

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v7
        with:
          version: latest
          args: --timeout=5m
