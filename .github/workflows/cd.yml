name: Continuous Deployment

on:
  push:
    branches: ['**']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production

permissions:
  contents: read
  id-token: write # Needed for OIDC authentication

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.filter.outputs.code }}
    steps:
      - uses: actions/checkout@v4

      - name: Filter Changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            code:
              - 'cmd/**'
              - 'utils/**'
              - 'main.go'
              - 'go.mod'
              - 'go.sum'
              - 'Dockerfile'
              - '.github/workflows/cd.yml'

  build-and-deploy:
    name: Build and Deploy
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.should_deploy == 'true' }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'

      - name: Set Environment Variables
        id: vars
        run: |
          echo "TIMESTAMP=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV
          echo "COMMIT_SHA_SHORT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "ENV_TAG=${{ github.event.inputs.environment || 'staging' }}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ github.event.inputs.environment || 'staging' }}-$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Build Docker Image
        run: |
          docker build \
            --build-arg VERSION="$(git describe --tags --always)" \
            --build-arg COMMIT="${{ github.sha }}" \
            --build-arg BUILD_DATE="$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
            -t ghcr.io/mdaashir/nsm:${{ env.IMAGE_TAG }} \
            .

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker Image
        run: docker push ghcr.io/mdaashir/nsm:${{ env.IMAGE_TAG }}

      - name: Tag as Latest for Environment
        run: |
          docker tag ghcr.io/mdaashir/nsm:${{ env.IMAGE_TAG }} ghcr.io/mdaashir/nsm:${{ env.ENV_TAG }}-latest
          docker push ghcr.io/mdaashir/nsm:${{ env.ENV_TAG }}-latest

      - name: Scan image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/mdaashir/nsm:${{ env.IMAGE_TAG }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Cleanup deployment artifacts (non-main branches)
        if: github.ref != 'refs/heads/main'
        run: |
          echo "Cleaning up deployment artifacts for non-main branch..."
          rm -f trivy-results.sarif
          docker image prune -af

  notify:
    name: Notify Deployment
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Send Deployment Notification
        uses: peter-evans/create-or-update-comment@v3
        with:
          issue-number: 1
          body: |
            :rocket: Deployed to ${{ github.event.inputs.environment || 'staging' }} environment!

            - **Commit**: ${{ github.sha }}
            - **Build**: ${{ github.run_id }}
            - **Docker Image**: `ghcr.io/mdaashir/nsm:${{ github.event.inputs.environment || 'staging' }}-${{ github.sha }}`

            [View Deployment Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
